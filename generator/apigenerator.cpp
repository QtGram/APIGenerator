#include "apigenerator.h"
#include "../schema/typeutils.h"
#include <QDebug>

APIGenerator::APIGenerator(const TelegramSchema &schema, const TelegramConstructors &constructors, const QString &destinationdir): BasicGenerator(schema, constructors, destinationdir)
{
    this->_name = "TelegramAPI";
}

void APIGenerator::setName(const QString &name)
{
    this->_name = name;
}

void APIGenerator::generate()
{
    ClassDeclarationStatement cdecl(this->_name, this->_destinationdir);
    ClassDefinitionStatement cdef(&cdecl, this->_destinationdir);

    LAMBDA_POINTER_D(ClassDeclarationStatement, cdecl);

    cdecl.includes([](QSet<QString>& includelist) {
        includelist << "<QObject>";
        includelist << "../types/basic.h";
        includelist << "../mtproto/mtprotorequest.h";
        includelist << "../mtproto/dc/dcsession.h";
        includelist << "../autogenerated/types/types.h";
        includelist << "../autogenerated/mtproto/mtproto.h";
    });

    cdecl.methods([this, LAMBDA_POINTER_V(cdecl)](QList<MethodDeclarationStatement*>& methodlist) {
        methodlist << new MethodDeclarationStatement(LAMBDA_POINTER_V(cdecl)->name());

        foreach(const SchemaItem* item, this->_schema["functions"]) {
           MethodDeclarationStatement* mds = new MethodDeclarationStatement(this->_mtprotomode ? "void" : "MTProtoRequest*",
                                                                            TypeUtils::apiCall(item->ctor()),
                                                                            MethodDeclarationStatement::STATIC);

           mds->addArgument("DCSession*", "session");

           foreach(const SchemaItem::SchemaField& field, item->fields()) {
               if(IS_FIELD_FLAG_KEEPER(field) || IS_FIELD_TRUE(field))
                   continue;

               mds->addArgument(this->decoratedType(field), field.name.toLower());
           }

           methodlist << mds;
        }
    });

    foreach(const SchemaItem* item, this->_schema["functions"]) {
        cdef.method(TypeUtils::apiCall(item->ctor()), [this, item](QString& body) {
            body += "MTProtoStream* mtstream = new MTProtoStream();\n\n";
            body += "mtstream->writeTLConstructor(TLTypes::" + item->ctor() + ");\n";

            foreach(const SchemaItem::SchemaField& field, item->fields()) {
               if(IS_FIELD_FLAG_KEEPER(field)) {
                   body += "\n" + field.type + " " + field.name + " = 0;\n";
                   this->compileFlags(item->fields(), body);
                   body += "mtstream->writeTLInt(" + field.name + ");\n\n";
                   continue;
               }

               if(IS_FIELD_FLAG(field)) {
                   if(IS_FIELD_TRUE(field))
                       continue;

                   IfStatement ifs;

                   ifs.addIf("IS_FLAG_SET(" + field.fieldref + ", " + QString::number(field.bitno) + ")", [this, field](QString& body) {
                       this->writeAPIArgument(field, body);
                   });

                   body += ifs.toString() + "\n";
                   continue;
               }

               this->writeAPIArgument(field, body);
            }

            if(this->_mtprotomode)
                body += "\nsession->sendPlain(mtstream);";
            else
                body += "\nreturn session->sendEncrypted(mtstream);";
        });
    }

    cdecl.write();
    cdef.write();
}

void APIGenerator::compileFlags(const SchemaItem::SchemaFields &fields, QString &body)
{
    foreach(const SchemaItem::SchemaField& field, fields)
    {
        if(!IS_FIELD_FLAG(field) || IS_FIELD_TRUE(field))
            continue;

        if(IS_FIELD_VECTOR(field) || (field.type == "TLBytes") || (field.type == "TLString"))
            body += "SET_FLAG_BIT_VALUE(" + field.fieldref + ", " + QString::number(field.bitno) + ", !" + field.name.toLower() + ".isEmpty());\n";
        else
            body += "SET_FLAG_BIT_VALUE(" + field.fieldref + ", " + QString::number(field.bitno) + ", " + field.name.toLower() + ");\n";
    }
}

void APIGenerator::writeAPIArgument(const SchemaItem::SchemaField& field, QString &body)
{
    if(IS_FIELD_BASIC_TYPE(field))
        body += "mtstream->write" + field.type + "(" + field.name.toLower() + ");\n";
    else if(IS_FIELD_VECTOR(field))
        body += "mtstream->writeTLVector(" + field.name.toLower() + ");\n";
    else
    {
        IfStatement ifs;
        ifs.addIf(field.name.toLower(), [field](QString& body) {
            body += field.name.toLower() + "->write(mtstream);\n";
        });

        ifs.setElse([](QString& body) {
            body += "mtstream->writeTLConstructor(TLTypes::Null);\n";
        });

        body += ifs.toString() + "\n";
    }
}
